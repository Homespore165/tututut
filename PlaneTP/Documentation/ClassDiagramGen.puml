@startuml

rectangle vue {
	class Form1 {
		- Controller _controller
	}
	class coordsPickerForm{
	    - Point _chosenCoordinates
        - Size _geoPinSize
	}
}

rectangle Controlleur {
class Controller {
	=Singleton
	- Controlleur instance
	+ Scenario Scenario
	+ Form1 form1
	+ Controller GetController()
	+ void AddAirport(String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void EditAirport(int airportId, String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void DeleteAirport(int airportId)
	+ void AddPlane(int airportId, string name, string type, int speed, int maintenanceTime, int boardingTime, int unboardingTime)
	+ void SaveScenario()
	+ void LoadScenario()
	+ void EmptyScenario()
	+ void SaveFrequencies(int fire, int rescue, int recon)
	+ String[] GetAirports()
	+ String[] GetPlanes(int airportId)
	+ int GetFire()
	+ int GetRescue()
	+ int GetRecon()
}
}

rectangle Model {
class Scenario {
    + event OnAirportUpdate
	+ List<Airport> Airports 
	+ int FrequencyFire
	+ int FrequencyRescue
	+ int FrequencyRecon
	+ void AddAirport(String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void AddAirport(Airport airport)
	+ void EditAirport(int id, String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void DeleteAirport(int id)
	+ void AddPlane(int airportId, string name, string type, int speed, int maintenanceTime, int boardingTime, int unboardingTime)
	+ void Load()
	+ void NotifyAirportChanged()
	+ void SubscribeAirportUpdate(Action<string[]> updateAirports)
	+ void SubscribePlaneUpdate(Action<string[]> updatePlanes)
	+ string[] GetPlanes(int airportId)
	+ int GetFire()
	+ int GetRescue()
	+ int GetRecon()
}

interface IXmlSerializable {
	+ void WriteXml(XmlWriter writer)
	+ void ReadXml(XmlReader reader)
}

class Position {
	+ int X
	+ int Y
}
class PlaneFactory {
	=Singleton
	- PlaneFactory instance
	+ PlaneFactory GetPlaneFactory()
	+ Plane CreatePlane(string name, string type, int speed, int maintenanceTime, int boardingTime, int unboardingTime)
}
abstract class Plane {
	+ String Name
	+ int Speed
	+ int MaintenanceTime
	+ string ToString()
}

abstract class PlaneTransport {
	+ int boardingTime
	+ int unboardTime
}

abstract class PlaneSupport {}

class Airport {
	+ String Name
	+ List<Plane> Planes
	+ int PassengerTraffic
	+ int CargoTraffic
	+ event OnPlaneUpdate
	+ void AddPlane(string name, string type, int speed, int maintenanceTime, int boardingTime, int unboardingTime)
	+ void ClearPlanes()
	+ string ToString()
	- void NotifyPlaneChanged()
	+ public void SubscribePlaneChanged(Action<string[]> updatePlanes)
    + void SubscribePlaneChanged(Action<string[]> updatePlanes)
    + void UnsubcribeAll()
    + string[] GetPlanes()
}

class PlaneCargo {}
class PlaneRecon{}
class PlanePassengers{}
class PlaneFire{}
class PlaneRescue{}
}

PlaneTransport --|> Plane
PlaneSupport --|> Plane
PlaneCargo --|> PlaneTransport
PlanePassengers --|> PlaneTransport
PlaneFire --|> PlaneSupport
PlaneRescue --|> PlaneSupport
PlaneRecon --|> PlaneSupport
Airport  "1" *-- "1" Position
Airport "1" *-- "N" Plane
Scenario "1" *-- "N" Airport
Scenario "1" --* "1" Controller
Controller "1" *-- "1" Form1
Form1 "1" o-- "1" Controller
Controller "1" *-- "1" Controller
PlaneFactory "1" *-- "1" PlaneFactory

IXmlSerializable <|-. Scenario
IXmlSerializable <|----. Plane
IXmlSerializable <|-. Airport
PlaneFactory <|-. Airport
@enduml