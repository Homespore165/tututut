@startuml

rectangle vue {
	class View {
		+Form form
	}
}

rectangle Controlleur {
class Controller {
	+ Scenario Scenario
	+ View View
	+ void CreateAirport(String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void EditAirport(int id, String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void DeleteAirport(int id)
	+ void CreatePlane(String name, int x, int y, int speed, int maintenanceTime)
	+ void SaveScenario()
	+ void LoadScenario()
	+ void ResetScenario()
}
}

rectangle Model {
class Scenario {
	+ Airport[] Airports 
	+ int FrequencyFire
	+ int FrequencyRescue
	+ int FrequencyRecon
	+ void CreateAirport(String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void EditAirport(int id, String name, int x, int y, int passengerTraffic, int cargoTraffic)
	+ void DeleteAirport(int id)
	+ void CreatePlane(String name, int x, int y, int speed, int maintenanceTime)
}

interface IXmlSerializable {
	+ void WriteXml()
	+ void ReadXml()
}

class Position {
	+ int X
	+ int Y
}

abstract class Plane {
	+ String Name
	+ Position Pos
	+ int Speed
	+ int MaintenanceTime
}

abstract class PlaneTransport {
	+ int TimeToBoard
	+ int TimeToDeboard
}

abstract class PlaneSupport {
}

class Airport {
	+ String Name
	+ Plane[] Planes
	+ int PassengerTraffic
	+ int CargoTraffic
}

class PlaneCargo {}
class PlaneRecon{}
class PlanePassengers{}
class PlaneFire{}
class PlaneRescue{}
}

PlaneTransport --|> Plane
PlaneSupport --|> Plane
PlaneCargo --|> PlaneTransport
PlanePassengers --|> PlaneTransport
PlaneFire --|> PlaneSupport
PlaneRescue --|> PlaneSupport
PlaneRecon --|> PlaneSupport
Airport --|> Position
Airport *-- Plane
Scenario "1" *-- "N" Airport
Scenario --* Controller
Controller *-- View

IXmlSerializable <|-. Scenario
IXmlSerializable <|-. Plane
IXmlSerializable <|-. Airport
@enduml